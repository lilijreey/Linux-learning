About Linux Libraries. Static and Shared 
--------------------------------------------

|Static-lib|
-------------------------------------------
*Create*
  ar options achive-name object-file....
  e.g ar my.a mod1.o mod2.o mod3.o
Use ar tool you can create, modify, list static lib.
 
*Using-static-lib*
 juse like obj-file
 e.g. ld -o file obj1.o my.a

*Overview*
 1.Use static-lib every exec file includes copies of all of the
   object files
 2.If static-lib changed you must recompilet exec files

|Shared-lib|
------------------------------------------
*Advantages*
1. Juse one lib's instance in virtual memroy. Every exec files that use same
   shared-libs use same one lib
2. Program size is smaller.
3. If the Shared-libs changed no need to recompilted the exec files.

*Principal-costs*
1. Shared-libs are more complex than static-libs.
2. Shared-libs must be compiled to use *position-independent* (-fPIC) code. 
   which has a performance overhead on most architectures Because it 
   requires the use of an extra register.
3. Run-time take a litte more tiem to load, relocation, reference to each
   symbol.

*Create-Shared-lib*
e.g gcc -c |-fPIC| -Wall mod1.c mod2.c mod3.c  <compiled>
    gcc -o |-Shared| -o libmyss.so mod1.o mod2.o mod3.o <link>

  Unlike static libraies is not possible to add or remove individual object
  from a previouly built shared library.

|-fPIC|: Generan *position-independent* code.
   On Linux/X86-32, It is possibel to create shared-lib without the -fPIC
   option.

*_GLOBAL_OFFSET_TABLE_* if share-file has _GLOBAL_OFFSET_TABLE_ symbol it
	 it compilet with -fPIC eather is not.
	 e.g nm myss.so | grep _GLOBAL_OFFSET_TABLE_
*TEXTREL* indicat shared-lib whose text segment contains a reference 
        that requires run-time relocation.
        readelf -d libmyss.so | grep TEXTREL

*Show-require.-hared-libs*
   Use *ldd* tool.

*Using-Shared-lib*
 juse like obj-file
 e.g. ld -o file libmyss.so obj.o

1. find share-lib in run-time
*Default-ld-path* /lib /use/lib and /etc/ld.so.conf is containes default search paht
*LD_LIBRARY_PATH* set LD_LIBRARY_PATH is add other search path
  then the ld-linux.so.2 searches for LD_LIBRARY_PATH list before looking 
  in the standard library.(ldd also can't find is not set)
Other way: set new path you specifiy in /etc/ld.so.d/ 
           and rebuild /etc/ld.so.cache use *ldconfig* -X
Compilting-with-search-path:
	gcc -Wall -Wl,-rpath,/home/path main.c lib.so
        gcc -Wl 选项直接把后面的参数传递给链接程序
       the RPATH section will in exec file
      use objdump -p a.out can see RPATH section

*LD_RUN_PATH* is also can replate the -rpath command <see> |LD_RPATH.readme|
*LD_RPATH*
*$ORIGIN* provite a reslote path the depented the exec file
        dirctory. e.g 
	gcc -Wall -Wl,-rpath,`$ORIGIN/lib' main.c ...
        the ld will find so in exec file/lib dircrory. 
        this provied the user don't install or set ld search path.


|/lib/ld.s|          Dynamic linker for a.out file
|/lib/ld-linux.so.2| Dynamic liker for ELF file is itself is a shared-lib, which                     is employed by every ELF executable that use shared-lib.
                   It find and link other shared-libs.
		    <see> ld.so man-page

*The-Shared-Lib-Soname*
*soname* is a kind of alias of real-shared-lib name. 
       The purpose of the soname is to provide a level of indirection.
       don't kear about the read-shared-lib name(different version)
       The soname name is embedded in exec file instead of the read name.
  e.g. gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c
       gcc -g -shared -Wl,-soname,libxx.so -o libmyss.1.so mod1.o mod2.o
  mod3.o <link>
       ln -s libmyss.1.so libxx.so <make-a-link>

*DT_SONAME* soname name
*Show-Soname*
  readelf -d libss.so | grep SONAME

*/proc/PID/maps* Show program currently using shread-libs
   
*Versins-and-Naming-Conventions*
read-name:lib*name.so.major-id.minor-id*
          different major-id versin is incompatiable. has different soname 
soname: lib*name.major-id*
linker-name: lname.so

                  
*Install-shared-lib*
  1.create ln 
  2.update /etc/ld.so.cache use ldconfig

EE can't use*-fomit-frame-pointer* in debug mode
  When use *-g* comilpiling option a progarm(lib) 
  should not be sepcified the -fomit-frame-pointer option.
  Because this makes debugging impossible.

*Run-Time-Symbol-Rosolution*
???


*Dynamically-Loaded-Libraries*
------------------------------------------------------------
  When an executable starts, the dynamic linker 
  loads all of the shared libraries. Sometimes, however,
  it can be useful to load libraries at call dlopen time 
  This provided by dl*  API

*dlopen()*
  open a shared-lib in run-time, return the lib-handle
  每次打开相同的lib都会增加一个引用数字， 使用dlclose
  会减少引用（和打开文件一样) 
  lib路径可以是absolute or relative
  flags:
   RTLD_LAZY, 在调用未定义的符合时在解决
   dlopen可以理解返回，但是会有潜在的错误发现不了
  
   RTLD_NOW,在dlopen 时就解决所有的未定义符号
   可以立即发现一些没有解决的符合定义和错误.但是dlopen比较慢

   其他flags 
   RTLD_GLOBAL 使得lib中解析的符号在其他的lib中可见
   RTLD_LOCAL  使得lib中解析的符号在其他的lib中不可见
   *LD_BIND_NOW* 环境变量可以覆盖 dlopen是的flags。
   只要LD_BIND_NOW 是任意非空直在dlopen 时就会结局所有的未定义符号
   使用elfread -r lib 察看重定位信息


EE 符号查找
目标文件有两个属性会影响到符号查找：
1. 符号搜索作用域
2. 符号自身的可见性
*dlclose()*
  closes a library previously opened by dlopen()
  只用引用为0时才回真正关闭 unload lib

*dlsym()*
  searches a library for a symbol 
*dlvsym()*
  searches a library for a symbol provite version lib
 使用dlsym 后要检查是否有错误
 .e.g.
 h =dlsym(ins, "fun");
 char *error = dlerror();
 if (error != NULL) 
  printf("error:%s", error");

*dlerror()*
  return a error-string

*Use-dl-funcs*
 use the API must built with *-ldl* lib



*Controlling-symbol-visibility*
  use __attribute__((visibility("xxx)")) control
  this attribute will see in realelf -s in Vis
  hitten hitten symbol that not want visit by outside common use share-lib
  inter-symbol.
  hidden attribute makes the symbol available across all source code
  files that compose the shared library, 
  but prevents it from being visible outside the library.

*Linker-Version-Scripts*
  控制lib中符号的可见性,和符号版本
  使用链接配置文件编译lib 
      gcc -Wl,--version-script,file.map -o lib.so
  控制符号可见性(导出符号)
  假设lib中只有f1,f2是接口函数需要导出，其他的符合都是内部使用
  不应导出。 对应的version-script 文件可以这样写e.g.
  // 下面的global he local 设置对应readelf -s 后每个符号的Bind 熟悉
  VER_1 { #版本号
    global:
     f1;
     f2;
    local:
      *; ## 支持通配符
   };
   //使用versin-script 文件编译so后，global指定的符号的Bind熟悉为GLOBAL
   //其他的为LOCAL
   //static 对象的Bind属性总是LOCAL。 versin-script 也改变不了 
   //C全局对象默认为global 属性




Qus.
-------------------------------------------------------
1.LD_RPATH LD_RUN_PATH  different
2.use shared-lib link-time do what, and run-time do what?
3.use dl* and complie shared-lib different
  dynmic-linker is ld.so and static-linker is ld.
4.when two programs use a shared-lib if the shared-lib troush
  what is happen?
5./proc/PID/maps is show either current using shread-lib and ldd so.



DOC
-------------------------------
Linux interface 41,42 Chapters

vim:ft=help softtabstop=2 shiftwidth=2
